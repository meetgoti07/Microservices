version: "3.8"

services:
  # ==========================================
  # DATABASE SERVICES
  # ==========================================

  postgres-auth:
    image: postgres:17-alpine
    container_name: postgres-auth
    environment:
      POSTGRES_DB: ${POSTGRES_AUTH_DB:-auth_db}
      POSTGRES_USER: ${POSTGRES_AUTH_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_AUTH_PORT:-5432}:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-menu:
    image: postgres:17-alpine
    container_name: postgres-menu
    environment:
      POSTGRES_DB: ${POSTGRES_MENU_DB:-menu_db}
      POSTGRES_USER: ${POSTGRES_MENU_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_MENU_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_MENU_PORT:-5433}:5432"
    volumes:
      - postgres_menu_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:8
    container_name: mongodb
    environment:
      MONGO_INITDB_DATABASE: order_service
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  mysql:
    image: mysql:9
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-queue_db}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:8-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ==========================================
  # MESSAGE QUEUE SERVICES
  # ==========================================

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Support both internal (kafka:29092) and external (localhost:9092) connections
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # MICROSERVICES
  # ==========================================

  auth-service:
    build:
      context: ./services/auth
      dockerfile: Dockerfile
    container_name: auth-service
    environment:
      PORT: ${AUTH_PORT:-3001}
      DATABASE_URL: ${AUTH_DATABASE_URL:-postgres://postgres:postgres@postgres-auth:5432/auth_db}
      REDIS_URL: ${AUTH_REDIS_URL:-redis://redis:6379}
      CORS_ORIGIN: ${AUTH_CORS_ORIGIN:-http://localhost:3000}
      BASE_URL: ${AUTH_BASE_URL:-http://localhost:8080}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${AUTH_PORT:-3001}:3001"
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3001/api/auth"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  menu-service:
    build:
      context: ./services/menu
      dockerfile: Dockerfile
    container_name: menu-service
    environment:
      SERVER_PORT: ${MENU_PORT:-3002}
      DATABASE_URL: ${MENU_DATABASE_URL:-jdbc:postgresql://postgres-menu:5432/menu_db}
      DB_USER: ${MENU_DB_USER:-postgres}
      DB_PASSWORD: ${MENU_DB_PASSWORD:-postgres}
      KAFKA_BROKERS: ${MENU_KAFKA_BROKERS:-kafka:9092}
      AUTH_SERVICE_URL: ${MENU_AUTH_SERVICE_URL:-http://auth-service:3001}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-prod}
    ports:
      - "${MENU_PORT:-3002}:3002"
      - "50051:50051"
    depends_on:
      postgres-menu:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "-q",
          "http://localhost:3002/actuator/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  order-service:
    build:
      context: ./services/order
      dockerfile: Dockerfile
    container_name: order-service
    environment:
      SERVICE_PORT: ${ORDER_PORT:-3003}
      MONGODB_URL: ${ORDER_MONGODB_URL:-mongodb://mongodb:27017}
      MONGODB_DB_NAME: ${ORDER_MONGODB_DB_NAME:-order_service}
      REDIS_URL: ${ORDER_REDIS_URL:-redis://redis:6379}
      KAFKA_BROKERS: ${ORDER_KAFKA_BROKERS:-kafka:9092}
      AUTH_SERVICE_URL: ${ORDER_AUTH_SERVICE_URL:-http://auth-service:3001}
      MENU_SERVICE_URL: ${ORDER_MENU_SERVICE_URL:-http://menu-service:3002}
      QUEUE_SERVICE_URL: ${ORDER_QUEUE_SERVICE_URL:-http://queue-service:3004}
      PYTHONUNBUFFERED: 1
    ports:
      - "${ORDER_PORT:-3003}:3003"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      menu-service:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "python",
          "-c",
          "import requests; requests.get('http://localhost:3003/health')",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  queue-service:
    build:
      context: ./services/queue
      dockerfile: Dockerfile
    container_name: queue-service
    environment:
      PORT: ${QUEUE_PORT:-3004}
      DB_HOST: ${QUEUE_DB_HOST:-mysql}
      DB_PORT: ${QUEUE_DB_PORT:-3306}
      DB_USER: ${QUEUE_DB_USER:-root}
      DB_PASSWORD: ${QUEUE_DB_PASSWORD:-root}
      DB_NAME: ${QUEUE_DB_NAME:-queue_db}
      REDIS_HOST: ${QUEUE_REDIS_HOST:-redis}
      REDIS_PORT: ${QUEUE_REDIS_PORT:-6379}
      KAFKA_BROKERS: ${QUEUE_KAFKA_BROKERS:-kafka:9092}
      AUTH_SERVICE_URL: ${QUEUE_AUTH_SERVICE_URL:-http://auth-service:3001}
      MENU_SERVICE_HOST: ${QUEUE_MENU_SERVICE_HOST:-menu-service}
      MENU_SERVICE_PORT: ${QUEUE_MENU_SERVICE_PORT:-50051}
      GIN_MODE: ${GIN_MODE:-release}
    ports:
      - "${QUEUE_PORT:-3004}:3004"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      menu-service:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: notification-service
    environment:
      PORT: ${NOTIFICATION_PORT:-3005}
      HOST: "0.0.0.0"
      DB_HOST: ${NOTIFICATION_DB_HOST:-mysql}
      DB_PORT: ${NOTIFICATION_DB_PORT:-3306}
      DB_USER: ${NOTIFICATION_DB_USER:-root}
      DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-root}
      DB_NAME: ${NOTIFICATION_DB_NAME:-notification_service}
      REDIS_HOST: ${NOTIFICATION_REDIS_HOST:-redis}
      REDIS_PORT: ${NOTIFICATION_REDIS_PORT:-6379}
      KAFKA_BROKERS: ${NOTIFICATION_KAFKA_BROKERS:-localhost:9092}
      AUTH_SERVICE_URL: ${NOTIFICATION_AUTH_SERVICE_URL:-http://auth-service:3001}
      CORS_ORIGIN: ${NOTIFICATION_CORS_ORIGIN:-*}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "${NOTIFICATION_PORT:-3005}:3005"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3005/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # FRONTEND APPLICATION
  # ==========================================

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
      NODE_ENV: ${NODE_ENV:-production}
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - menu-service
      - order-service
      - queue-service
      - notification-service
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # API GATEWAY (NGINX)
  # ==========================================

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-gateway
    ports:
      - "${NGINX_PORT:-8080}:80"
      - "${NGINX_METRICS_PORT:-8081}:8081"
    volumes:
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    depends_on:
      auth-service:
        condition: service_healthy
      menu-service:
        condition: service_healthy
      order-service:
        condition: service_healthy
      queue-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      frontend:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

# ==========================================
# VOLUMES
# ==========================================
volumes:
  # Database volumes for persistence
  postgres_auth_data:
    driver: local
  postgres_menu_data:
    driver: local
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  mysql_data:
    driver: local
  redis_data:
    driver: local

  # Kafka & Zookeeper volumes
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

  # Nginx volumes
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local

# ==========================================
# NETWORKS
# ==========================================
networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
