services:
  # ==========================================
  # DATABASE SERVICES
  # ==========================================

  postgres-auth:
    image: postgres:17-alpine
    container_name: postgres-auth-dev
    environment:
      POSTGRES_DB: ${POSTGRES_AUTH_DB:-auth_db}
      POSTGRES_USER: ${POSTGRES_AUTH_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_AUTH_PORT:-5432}:5432"
    volumes:
      - postgres_auth_data_dev:/var/lib/postgresql/data
    networks:
      - app-network-dev
    restart: unless-stopped

  postgres-menu:
    image: postgres:17-alpine
    container_name: postgres-menu-dev
    environment:
      POSTGRES_DB: ${POSTGRES_MENU_DB:-menu_db}
      POSTGRES_USER: ${POSTGRES_MENU_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_MENU_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "${POSTGRES_MENU_PORT:-5433}:5432"
    volumes:
      - postgres_menu_data_dev:/var/lib/postgresql/data
      - ./services/menu/schema.sql:/docker-entrypoint-initdb.d/001-schema.sql:ro
    networks:
      - app-network-dev
    restart: unless-stopped

  mongodb:
    image: mongo:8
    container_name: mongodb-dev
    environment:
      MONGO_INITDB_DATABASE: order_service
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data_dev:/data/db
      - mongodb_config_dev:/data/configdb
    networks:
      - app-network-dev
    restart: unless-stopped

  mysql:
    image: mysql:8.0
    container_name: mysql-dev
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-queue_db}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    volumes:
      - mysql_data_dev:/var/lib/mysql
      - ./services/queue/migrations/002_create_queue_tables_fixed.sql:/docker-entrypoint-initdb.d/001-queue-schema.sql:ro
    networks:
      - app-network-dev
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password

  redis:
    image: redis:8-alpine
    container_name: redis-dev
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - app-network-dev
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # ==========================================
  # MESSAGE QUEUE SERVICES
  # ==========================================

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper-dev
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_CLIENT_PORT:-2181}
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
    volumes:
      - zookeeper_data_dev:/var/lib/zookeeper/data
      - zookeeper_logs_dev:/var/lib/zookeeper/log
    networks:
      - app-network-dev
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka-dev
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Support both internal (Docker) and external (localhost) clients
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_HEAP_OPTS: "-Xms512M -Xmx512M"
    ports:
      - "${KAFKA_PORT:-9092}:9092"
    volumes:
      - kafka_data_dev:/var/lib/kafka/data
    networks:
      - app-network-dev
    restart: unless-stopped

  # ==========================================
  # MICROSERVICES (DEV MODE WITH HOT RELOAD)
  # ==========================================

  auth-service:
    image: oven/bun:latest
    container_name: auth-service-dev
    working_dir: /app
    environment:
      PORT: ${AUTH_PORT:-3001}
      DATABASE_URL: ${AUTH_DATABASE_URL:-postgres://postgres:postgres@postgres-auth:5432/auth_db}
      REDIS_URL: ${AUTH_REDIS_URL:-redis://redis:6379}
      CORS_ORIGIN: ${AUTH_CORS_ORIGIN:-http://localhost:3000}
      BASE_URL: ${AUTH_BASE_URL:-http://localhost:8080}
      NODE_ENV: development
    ports:
      - "${AUTH_PORT:-3001}:3001"
    volumes:
      - ./services/auth:/app:cached
      - bun_cache_auth:/root/.bun
    command: sh -c "bun install && bun run --watch src/index.ts"
    depends_on:
      - postgres-auth
      - redis
    networks:
      - app-network-dev
    restart: unless-stopped

  menu-service:
    image: maven:3.9-eclipse-temurin-21-alpine
    container_name: menu-service-dev
    working_dir: /app
    environment:
      SERVER_PORT: ${MENU_PORT:-3002}
      DATABASE_URL: ${MENU_DATABASE_URL:-jdbc:postgresql://postgres-menu:5432/menu_db}
      DB_USER: ${MENU_DB_USER:-postgres}
      DB_PASSWORD: ${MENU_DB_PASSWORD:-postgres}
      KAFKA_BROKERS: ${MENU_KAFKA_BROKERS:-kafka:29092}
      AUTH_SERVICE_URL: ${MENU_AUTH_SERVICE_URL:-http://auth-service:3001}
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      SPRING_DEVTOOLS_RESTART_ENABLED: "true"
      SPRING_DEVTOOLS_LIVERELOAD_ENABLED: "true"
    ports:
      - "${MENU_PORT:-3002}:3002"
      - "50051:50051"
      - "35729:35729" # LiveReload port
    volumes:
      - ./services/menu:/app:cached
      - maven_repo:/root/.m2
    command: >
      sh -c "mvn spring-boot:run 
      -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
      -Dspring-boot.run.fork=false"
    depends_on:
      - postgres-menu
      - kafka
      - auth-service
    networks:
      - app-network-dev
    restart: unless-stopped

  order-service:
    image: python:3.12-slim
    container_name: order-service-dev
    working_dir: /app
    environment:
      SERVICE_PORT: ${ORDER_PORT:-3003}
      MONGODB_URL: ${ORDER_MONGODB_URL:-mongodb://mongodb:27017}
      MONGODB_DB_NAME: ${ORDER_MONGODB_DB_NAME:-order_service}
      REDIS_URL: ${ORDER_REDIS_URL:-redis://redis:6379}
      KAFKA_BROKERS: ${ORDER_KAFKA_BROKERS:-kafka:29092}
      AUTH_SERVICE_URL: ${ORDER_AUTH_SERVICE_URL:-http://auth-service:3001}
      MENU_SERVICE_URL: ${ORDER_MENU_SERVICE_URL:-http://menu-service:3002}
      QUEUE_SERVICE_URL: ${ORDER_QUEUE_SERVICE_URL:-http://queue-service:3004}
      PYTHONUNBUFFERED: 1
      WATCHFILES_FORCE_POLLING: "true"
    ports:
      - "${ORDER_PORT:-3003}:3003"
    volumes:
      - ./services/order:/app:cached
      - pip_cache_order:/root/.cache/pip
    command: >
      sh -c "pip install --no-cache-dir -r requirements.txt &&
             uvicorn main:app --host 0.0.0.0 --port 3003 --reload --reload-dir /app"
    depends_on:
      - mongodb
      - redis
      - kafka
      - auth-service
      - menu-service
    networks:
      - app-network-dev
    restart: unless-stopped

  queue-service:
    image: golang:1.23-alpine
    container_name: queue-service-dev
    working_dir: /app
    environment:
      PORT: ${QUEUE_PORT:-3004}
      DB_HOST: ${QUEUE_DB_HOST:-mysql}
      DB_PORT: ${QUEUE_DB_PORT:-3306}
      DB_USER: ${QUEUE_DB_USER:-root}
      DB_PASSWORD: ${QUEUE_DB_PASSWORD:-root}
      DB_NAME: ${QUEUE_DB_NAME:-queue_db}
      REDIS_HOST: ${QUEUE_REDIS_HOST:-redis}
      REDIS_PORT: ${QUEUE_REDIS_PORT:-6379}
      KAFKA_BROKERS: ${QUEUE_KAFKA_BROKERS:-kafka:29092}
      AUTH_SERVICE_URL: ${QUEUE_AUTH_SERVICE_URL:-http://auth-service:3001}
      MENU_SERVICE_HOST: ${QUEUE_MENU_SERVICE_HOST:-menu-service}
      MENU_SERVICE_PORT: ${QUEUE_MENU_SERVICE_PORT:-50051}
      GIN_MODE: ${GIN_MODE:-debug}
      CGO_ENABLED: 1
    ports:
      - "${QUEUE_PORT:-3004}:3004"
      - "2345:2345" # Delve debugger port
    volumes:
      - ./services/queue:/app:cached
      - go_modules:/go/pkg/mod
    command: >
      sh -c "apk add --no-cache gcc musl-dev &&
             go install github.com/air-verse/air@latest &&
             air -c .air.toml || (go mod download && go run main.go)"
    depends_on:
      - mysql
      - redis
      - kafka
      - auth-service
      - menu-service
    networks:
      - app-network-dev
    restart: unless-stopped

  notification-service:
    image: node:22-alpine
    container_name: notification-service-dev
    working_dir: /app
    environment:
      PORT: ${NOTIFICATION_PORT:-3005}
      HOST: "0.0.0.0"
      DB_HOST: ${NOTIFICATION_DB_HOST:-mysql}
      DB_PORT: ${NOTIFICATION_DB_PORT:-3306}
      DB_USER: ${NOTIFICATION_DB_USER:-root}
      DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-root}
      DB_NAME: ${NOTIFICATION_DB_NAME:-notification_service}
      REDIS_HOST: ${NOTIFICATION_REDIS_HOST:-redis}
      REDIS_PORT: ${NOTIFICATION_REDIS_PORT:-6379}
      KAFKA_BROKERS: ${NOTIFICATION_KAFKA_BROKERS:-kafka:29092}
      AUTH_SERVICE_URL: ${NOTIFICATION_AUTH_SERVICE_URL:-http://auth-service:3001}
      CORS_ORIGIN: ${NOTIFICATION_CORS_ORIGIN:-*}
      NODE_ENV: development
    ports:
      - "${NOTIFICATION_PORT:-3005}:3005"
    volumes:
      - ./services/notification:/app:cached
      - /app/node_modules
      - pnpm_store_notification:/root/.local/share/pnpm/store
    command: >
      sh -c "npm install -g pnpm &&
             pnpm install &&
             node --watch server.js"
    depends_on:
      - mysql
      - redis
      - kafka
      - auth-service
    networks:
      - app-network-dev
    restart: unless-stopped

  # ==========================================
  # FRONTEND APPLICATION (DEV MODE)
  # ==========================================

  frontend:
    image: node:22-alpine
    container_name: frontend-dev
    working_dir: /app
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8080}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL:-ws://localhost:8080}
      NODE_ENV: development
      WATCHPACK_POLLING: "true"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
      - /app/.next
      - pnpm_store_frontend:/root/.local/share/pnpm/store
    command: >
      sh -c "npm install -g pnpm &&
             pnpm install &&
             pnpm run dev"
    depends_on:
      - auth-service
      - menu-service
      - order-service
      - queue-service
      - notification-service
    networks:
      - app-network-dev
    restart: unless-stopped

  # ==========================================
  # API GATEWAY (NGINX)
  # ==========================================

  nginx:
    image: nginx:alpine
    container_name: nginx-gateway-dev
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - nginx_cache_dev:/var/cache/nginx
      - nginx_logs_dev:/var/log/nginx
    depends_on:
      - auth-service
      - menu-service
      - order-service
      - queue-service
      - notification-service
      - frontend
    networks:
      - app-network-dev
    restart: unless-stopped

# ==========================================
# VOLUMES
# ==========================================
volumes:
  # Database volumes for persistence
  postgres_auth_data_dev:
    driver: local
  postgres_menu_data_dev:
    driver: local
  mongodb_data_dev:
    driver: local
  mongodb_config_dev:
    driver: local
  mysql_data_dev:
    driver: local
  redis_data_dev:
    driver: local

  # Kafka & Zookeeper volumes
  zookeeper_data_dev:
    driver: local
  zookeeper_logs_dev:
    driver: local
  kafka_data_dev:
    driver: local

  # Nginx volumes
  nginx_cache_dev:
    driver: local
  nginx_logs_dev:
    driver: local

  # Package manager caches
  maven_repo:
    driver: local
  go_modules:
    driver: local
  bun_cache_auth:
    driver: local
  pnpm_store_frontend:
    driver: local
  pnpm_store_notification:
    driver: local
  pip_cache_order:
    driver: local

# ==========================================
# NETWORKS
# ==========================================
networks:
  app-network-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
