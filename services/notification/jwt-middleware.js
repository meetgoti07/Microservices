/**
 * JWT Verification Middleware for Node.js/Fastify services
 * Decodes JWT without verification (trusted from auth service via Nginx)
 */

/**
 * Decode JWT payload without verification
 * Note: This is acceptable since tokens are generated by our trusted auth service
 * and we're behind Nginx which provides additional security
 */
export function decodeJwtPayload(token) {
    try {
        const parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('Invalid token format');
        }

        // Decode the payload (second part)
        const payload = parts[1];
        const decoded = Buffer.from(payload, 'base64url').toString('utf8');
        const parsed = JSON.parse(decoded);

        // Check expiration
        if (parsed.exp) {
            const now = Math.floor(Date.now() / 1000);
            if (parsed.exp < now) {
                throw new Error('Token expired');
            }
        }

        return parsed;
    } catch (error) {
        console.error('Token decode failed:', error.message);
        throw new Error('Invalid or expired token');
    }
}

/**
 * Verify a JWT token by decoding it
 */
export async function verifyToken(token) {
    return decodeJwtPayload(token);
}

/**
 * Extract Bearer token from Authorization header
 */
export function extractBearerToken(authHeader) {
    if (!authHeader || !authHeader.startsWith("Bearer ")) {
        return null;
    }
    return authHeader.substring(7);
}

/**
 * Express middleware to verify JWT token
 *
 * Usage:
 * import { authMiddleware } from './jwt-middleware';
 * app.get('/protected', authMiddleware, (req, res) => {
 *   res.json({ user: req.user });
 * });
 */
export async function authMiddleware(req, res, next) {
    try {
        const authHeader = req.headers.authorization || req.headers.Authorization;

        if (!authHeader) {
            return res.status(401).json({ error: "Authorization header missing" });
        }

        const token = extractBearerToken(authHeader);

        if (!token) {
            return res.status(401).json({
                error: "Invalid authorization format. Expected: Bearer <token>",
            });
        }

        const payload = await verifyToken(token);
        req.user = payload; // Attach user info to request object
        next();
    } catch (error) {
        return res.status(401).json({ error: "Invalid or expired token" });
    }
}

/**
 * Socket.IO authentication middleware
 *
 * Usage:
 * import { socketAuthMiddleware } from './jwt-middleware';
 * io.use(socketAuthMiddleware);
 */
export async function socketAuthMiddleware(socket, next) {
    try {
        const token =
            socket.handshake.auth?.token ||
            socket.handshake.headers?.authorization?.substring(7);

        if (!token) {
            return next(new Error("Authentication token missing"));
        }

        const payload = await verifyToken(token);
        socket.user = payload; // Attach user info to socket
        next();
    } catch (error) {
        next(new Error("Invalid or expired token"));
    }
}
