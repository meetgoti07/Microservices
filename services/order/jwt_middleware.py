"""
JWT Verification Middleware for Python FastAPI services
Decodes JWT without verification (trusted from auth service via Nginx)
"""
import base64
import json
import time
from typing import Optional, Dict, Any
from fastapi import HTTPException, Header
from typing import Annotated
import logging

logger = logging.getLogger(__name__)


def decode_jwt_payload(token: str) -> Dict[str, Any]:
    """
    Decode JWT payload without verification
    Note: This is acceptable since tokens are generated by our trusted auth service
    and we're behind Nginx which provides additional security
    
    Args:
        token: JWT token string
        
    Returns:
        Decoded token payload
        
    Raises:
        ValueError: If token is invalid or expired
    """
    try:
        parts = token.split('.')
        if len(parts) != 3:
            raise ValueError('Invalid token format')
        
        # Decode the payload (second part)
        payload = parts[1]
        
        # Add padding if needed for base64 decoding
        padding = 4 - len(payload) % 4
        if padding != 4:
            payload += '=' * padding
        
        decoded = base64.urlsafe_b64decode(payload).decode('utf-8')
        parsed = json.loads(decoded)
        
        # Check expiration
        if parsed.get('exp'):
            now = int(time.time())
            if parsed['exp'] < now:
                raise ValueError('Token expired')
        
        return parsed
        
    except Exception as e:
        logger.error(f"Token decode failed: {e}")
        raise ValueError('Invalid or expired token')


def extract_bearer_token(auth_header: Optional[str]) -> Optional[str]:
    """
    Extract Bearer token from Authorization header
    
    Args:
        auth_header: Authorization header value
        
    Returns:
        Token string without "Bearer " prefix, or None if invalid
    """
    if not auth_header or not auth_header.startswith("Bearer "):
        return None
    return auth_header[7:]


# FastAPI Dependency
async def get_current_user(authorization: Annotated[Optional[str], Header()] = None) -> Dict[str, Any]:
    """
    FastAPI dependency to verify JWT token and extract user info
    
    Usage:
        @app.get("/protected")
        async def protected_route(user: dict = Depends(get_current_user)):
            return {"user": user}
    """
    if not authorization:
        raise HTTPException(status_code=401, detail="Authorization header missing")
    
    token = extract_bearer_token(authorization)
    if not token:
        raise HTTPException(
            status_code=401,
            detail="Invalid authorization format. Expected: Bearer <token>"
        )
    
    try:
        payload = decode_jwt_payload(token)
        return payload
    except ValueError as e:
        raise HTTPException(status_code=401, detail=str(e))

