package com.example.map.security;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Base64;
import java.util.Collections;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private static final Logger log = LoggerFactory.getLogger(JwtAuthenticationFilter.class);
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws ServletException, IOException {

        String requestURI = request.getRequestURI();
        String method = request.getMethod();
        log.info("==> Incoming request: {} {}", method, requestURI);

        String authHeader = request.getHeader("Authorization");

        if (authHeader == null || !authHeader.startsWith("Bearer ")) {
            log.warn("==> Authorization header missing or invalid for {} {}", method, requestURI);
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\": \"Authorization header missing or invalid\"}");
            return;
        }

        String token = authHeader.substring(7);

        try {
            // Decode JWT payload (we trust tokens from the frontend since they go through auth)
            JsonNode userInfo = decodeJwtPayload(token);
            
            log.info("Decoded JWT payload: {}", userInfo.toString());
            
            // Check expiration
            if (userInfo.has("exp")) {
                long exp = userInfo.get("exp").asLong();
                long now = System.currentTimeMillis() / 1000;
                if (exp < now) {
                    throw new RuntimeException("Token expired");
                }
            }
            
            // Add user info to request attributes
            String userId = userInfo.has("id") ? userInfo.get("id").asText() : null;
            String userEmail = userInfo.has("email") ? userInfo.get("email").asText() : null;
            String userName = userInfo.has("name") ? userInfo.get("name").asText() : null;
            String userRole = userInfo.has("role") ? userInfo.get("role").asText() : "user";
            
            log.info("Setting request attributes - userId: {}, userEmail: {}, userName: {}, userRole: {}", 
                    userId, userEmail, userName, userRole);
            
            request.setAttribute("userId", userId);
            request.setAttribute("userEmail", userEmail);
            request.setAttribute("userName", userName);
            request.setAttribute("userRole", userRole);
            request.setAttribute("user", userInfo);

            // Set Spring Security Authentication
            SimpleGrantedAuthority authority = new SimpleGrantedAuthority("ROLE_" + userRole.toUpperCase());
            UsernamePasswordAuthenticationToken authentication = 
                new UsernamePasswordAuthenticationToken(userId, null, Collections.singletonList(authority));
            authentication.setDetails(userInfo);
            SecurityContextHolder.getContext().setAuthentication(authentication);
            
            log.info("==> Spring Security authentication set for user: {} with role: {} (Authority: ROLE_{})", 
                    userId, userRole, userRole.toUpperCase());

            filterChain.doFilter(request, response);
        } catch (Exception e) {
            log.error("==> Token verification failed for {} {}: {}", method, requestURI, e.getMessage(), e);
            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
            response.setContentType("application/json");
            response.getWriter().write("{\"error\": \"Invalid or expired token: " + e.getMessage() + "\"}");
        }
    }

    /**
     * Decode JWT payload without verification
     * Note: This is acceptable since tokens are generated by our trusted auth service
     * and we're behind Nginx which provides additional security
     */
    private JsonNode decodeJwtPayload(String token) throws Exception {
        String[] parts = token.split("\\.");
        if (parts.length < 2) {
            throw new IllegalArgumentException("Invalid token format");
        }

        // Decode the payload (second part)
        String payloadJson = new String(Base64.getUrlDecoder().decode(parts[1]));
        return objectMapper.readTree(payloadJson);
    }

    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        // Skip filter for public endpoints
        String path = request.getRequestURI();
        String method = request.getMethod();
        return path.startsWith("/public") || 
               path.equals("/health") || 
               path.equals("/actuator") ||
               (path.equals("/api/menu/categories") && method.equals("GET")) || // Only public for GET
               (path.startsWith("/api/menu/items") && method.equals("GET")); // Public GET for menu items
    }
}

